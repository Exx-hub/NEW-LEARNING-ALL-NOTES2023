super in Class


class Animal {
  constructor(name) {
    this.name = name;
  }
}

class Dog extends Animal {
  constructor(name, breed) {
    super(name);
    this.breed = breed;
  }
}

const myDog = new Dog('Buddy', 'Golden Retriever');
console.log(myDog.name); // output: 'Buddy'
console.log(myDog.breed); // output: 'Golden Retriever'




--- super calls the constructor of the parent class. and passes data it wants to pass to the parent
--- like in above, subclass calls super to get access to Animal constructor and passes name to it.


In this example, the Dog class extends the Animal class, which has a name property initialized in its constructor. The Dog class has its own property breed that is initialized in its constructor. By calling super(name) in the Dog constructor, the Animal constructor is called with the name parameter, and the name property is set on the Dog instance. Then the Dog constructor sets the breed property on the Dog instance.

Note that the super function can only be used within a subclass constructor and must be called before this can be used.


In the example I provided, the name argument is passed to the super function as an argument. This means that the name value is passed to the Animal constructor when the Dog constructor is called using super(name).

The super function here is used to call the constructor of the superclass (Animal in this case) and pass in any required arguments (name in this case). This ensures that the name property is properly initialized in the Animal class before any additional initialization code in the Dog class constructor is executed.
